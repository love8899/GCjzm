@using Wfm.Web.Models.Accounts

@model PasswordRecoveryConfirmModel

@{
    Layout = "";
}
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>@T("PageTitle.PasswordRecovery")</title>
    <link href="@Url.Content("~/Content/login.css")" rel="stylesheet" type="text/css" />
</head>
<body>
    <div class="login-box">

        <div class="login-header">Tempus Workforce</div>

        @if (!String.IsNullOrEmpty(Model.Result))
        {
            <div class="result" style="color:red">
                @Model.Result
            </div>
        }
        @if (!Model.SuccessfullyChanged)
        {
            using (Html.BeginForm())
            {
                @Html.HiddenFor(model => model.PasswordPolicyModel.Code)
                @Html.HiddenFor(model => model.PasswordPolicyModel.PasswordHistory)
                @Html.HiddenFor(model => model.PasswordPolicyModel.PasswordLifeTime)
                @Html.HiddenFor(model => model.PasswordPolicyModel.MinLength)
                @Html.HiddenFor(model => model.PasswordPolicyModel.MaxLength)
                @Html.HiddenFor(model => model.PasswordPolicyModel.RequireLowerCase)
                @Html.HiddenFor(model => model.PasswordPolicyModel.RequireNumber)
                @Html.HiddenFor(model => model.PasswordPolicyModel.RequireSymbol)
                @Html.HiddenFor(model => model.PasswordPolicyModel.RequireUpperCase)
                <div class="login-info">@ViewBag.LogInfo</div>
                <div class="login-password">
                    @Html.TextBoxFor(m => m.NewPassword, new { type = "password", placeholder = T("Common.NewPassword") })
                    @Html.WfmValidationMessageFor(model => model.NewPassword)
                </div>
                <div class="login-password">
                    @Html.TextBoxFor(m => m.ConfirmNewPassword, new { type = "password", placeholder = T("Common.ConfirmNewPassword") })
                    @Html.WfmValidationMessageFor(model => model.ConfirmNewPassword)
                </div>
            if(!ViewBag.ShowOldPassword)
                { 
                    <div class="retrieve-text">
                        @Html.DisplayFor(model => model.SecurityQuestion1)
                        @Html.HiddenFor(model => model.SecurityQuestion1)
                    </div>
                    <div class="login-username">
                        @Html.TextBoxFor(m => m.SecurityQuestion1Answer, new { placeholder = T("Candidate.Fields.SecurityQuestionAnswer") })
                        @Html.WfmValidationMessageFor(model => model.SecurityQuestion1Answer)
                    </div>
                    <div class="retrieve-text">
                        @Html.DisplayFor(model => model.SecurityQuestion2)
                        @Html.HiddenFor(model => model.SecurityQuestion2)
                    </div>
                    <div class="login-username">
                        @Html.TextBoxFor(m => m.SecurityQuestion2Answer, new { placeholder = T("Candidate.Fields.SecurityQuestionAnswer") })
                        @Html.WfmValidationMessageFor(model => model.SecurityQuestion2Answer)
                    </div>
                 }
            <div></div>
    <div class="login-button"><button id="set-password" name="set-password" type="submit">Submit</button></div>
            }
        }
    </div>
    <div class="login-footer">
        <div class="copyright">&copy; @(DateTime.Today.Year) Tempus Workforce Management</div>
        <div class="footer-links"> @Html.ActionLink("Privacy policy", "ClientPrivacyPolicy", "Home", null, new { target = "_blank" }) | @Html.ActionLink("Terms of use", "ClientTermsOfUse", "Home", null, new { target = "_blank" })</div>
    </div>
</body>
</html>