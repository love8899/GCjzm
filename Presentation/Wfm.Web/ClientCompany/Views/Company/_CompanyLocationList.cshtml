@using Wfm.Services.DirectoryLocation;

@model IEnumerable<CompanyLocationModel>
@{
    Layout = "";

    var cityService = EngineContext.Current.Resolve<ICityService>();
    var stateProvinceService = EngineContext.Current.Resolve<IStateProvinceService>();
    var countryService = EngineContext.Current.Resolve<ICountryService>();

    var cities = cityService.GetAllCities();
    var stateProvinces = stateProvinceService.GetAllStateProvinces();
    var countries = countryService.GetAllCountries();
}

<table class="adminContent">
    <tr>
        <td>
            @(Html.Kendo().Grid<CompanyLocationModel>()
                .Name("companylocation-grid")
                .Columns(columns =>
                {
                    columns.Bound(x => x.LocationName);
                    columns.Bound(x => x.AddressLine1);

                    columns.ForeignKey(x => x.CityId, cities, "Id", "CityName").Width(120);
                    columns.ForeignKey(x => x.StateProvinceId, stateProvinces, "Id", "StateProvinceName").Width(120);
                    columns.ForeignKey(x => x.CountryId, countries, "Id", "CountryName").Width(120);

                    columns.Bound(x => x.PrimaryPhone).Width(110);

                    columns.Bound(x => x.IsActive).Width(80)
                    .ClientTemplate("#if (IsActive == true) {# <span class='k-icon k-i-tick'/> #}else{# <span class='k-icon k-i-close'/> #}#")
                        .HeaderHtmlAttributes(new { style = "text-align:center" }).HtmlAttributes(new { style = "text-align:center" });

                    //columns.Bound(x => x.UpdatedOn).Format("{0:yyyy-MM-dd HH:mm}").Width(120);
                    //columns.Bound(x => x.CreatedOn).Format("{0:yyyy-MM-dd HH:mm}").Width(120);
                })
                                .EnableCustomBinding(false)
                                .Reorderable(reorder => reorder.Columns(true))
                                .Filterable()
                                .Sortable()
                                .ColumnMenu()
                                .Selectable()
                                .Pageable(x => x.PageSizes(new[] { 10, 20, 30, 50, 100 }).Refresh(true))
                                .DataSource(ds => ds
                                    .Ajax()
                                    .ServerOperation(false)
                                    .PageSize(20)
                                    .Read(read => read.Action("_CompanyLocationList", "Company"))
                                )
                                .Filterable(filterable => filterable
                                    .Extra(false)
                                    .Operators(operators => operators
                                        .ForString(str => str.Clear()
                                            .Contains("Contains")
                                            .IsEqualTo("Is equal to")
                                            .IsNotEqualTo("Is not equal to")
                                        )
                                    )
                                )
            )
        </td>
    </tr>
</table>