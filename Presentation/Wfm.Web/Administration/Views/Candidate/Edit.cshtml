@using Wfm.Services.Common;
@model CandidateModel
@{
    //page title
    ViewBag.Title = T("Admin.Candidate.Candidate.EditCandidateDetails").Text;

    var vetranTypeService = EngineContext.Current.Resolve<IVetranTypeService>();
    var vetranTypes = vetranTypeService.GetAllVetranTypes();
    var vetranTypesDropDownList = new List<SelectListItem>();
    foreach (var c in vetranTypes)
    {
        var item = new SelectListItem()
        {
            Text = c.VetranTypeName,
            Value = c.Id.ToString()
        };
        vetranTypesDropDownList.Add(item);
    }

    var sourceService = EngineContext.Current.Resolve<ISourceService>();
    var sources = sourceService.GetAllSources();
    var sourceDropDownList = new List<SelectListItem>();
    foreach (var c in sources)
    {
        var item = new SelectListItem()
        {
            Text = c.SourceName,
            Value = c.Id.ToString()
        };
        sourceDropDownList.Add(item);
    }

    var ethnicTypeService = EngineContext.Current.Resolve<IEthnicTypeService>();
    var ethnics = ethnicTypeService.GetAllEthnicTypes();
    var ethnicsDropDownList = new List<SelectListItem>();
    foreach (var c in ethnics)
    {
        var item = new SelectListItem()
        {
            Text = c.EthnicTypeName,
            Value = c.Id.ToString()
        };
        ethnicsDropDownList.Add(item);
    }

    var reasonDropDownList = new List<SelectListItem>();
    reasonDropDownList.Add(new SelectListItem() { Text = "Shortage of work / End of contract or season" });
    reasonDropDownList.Add(new SelectListItem() { Text = "Strike or lockout" });
    reasonDropDownList.Add(new SelectListItem() { Text = "Illness or injury" });
    reasonDropDownList.Add(new SelectListItem() { Text = "Quit" });
    reasonDropDownList.Add(new SelectListItem() { Text = "Maternity" });
    reasonDropDownList.Add(new SelectListItem() { Text = "Mandatory retirement" });
    reasonDropDownList.Add(new SelectListItem() { Text = "Retirement / Approved workforce reduction" });
    reasonDropDownList.Add(new SelectListItem() { Text = "Apprentice training" });
    reasonDropDownList.Add(new SelectListItem() { Text = "Dismissal" });
    reasonDropDownList.Add(new SelectListItem() { Text = "Leave of absence" });
    reasonDropDownList.Add(new SelectListItem() { Text = "Parental" });
    reasonDropDownList.Add(new SelectListItem() { Text = "Compassionate care/Parents of Critically Ill Children" });
    reasonDropDownList.Add(new SelectListItem() { Text = "Other" });
}

@using (Html.BeginForm())
{
    @Html.ValidationSummary(true)
    Html.EnableClientValidation(false);
    @Html.HiddenFor(model => model.Id)
    @Html.HiddenFor(model => model.PasswordPolicyModel.Code)
    @Html.HiddenFor(model => model.PasswordPolicyModel.PasswordHistory)
    @Html.HiddenFor(model => model.PasswordPolicyModel.PasswordLifeTime)
    @Html.HiddenFor(model => model.PasswordPolicyModel.MinLength)
    @Html.HiddenFor(model => model.PasswordPolicyModel.MaxLength)
    @Html.HiddenFor(model => model.PasswordPolicyModel.RequireLowerCase)
    @Html.HiddenFor(model => model.PasswordPolicyModel.RequireNumber)
    @Html.HiddenFor(model => model.PasswordPolicyModel.RequireSymbol)
    @Html.HiddenFor(model => model.PasswordPolicyModel.RequireUpperCase)
    @Html.HiddenFor(model => model.CandidateGuid)
    @Html.HiddenFor(model => model.Password)
    @Html.HiddenFor(model => model.RePassword)
    @Html.HiddenFor(model => model.EnteredBy)
    @Html.HiddenFor(model => model.OwnerId)
    @Html.HiddenFor(model => model.Entitled)
    @Html.HiddenFor(model => model.SearchKeys)
    @Html.HiddenFor(model => model.FranchiseId)
    @Html.HiddenFor(model => model.IsBanned)
    @Html.HiddenFor(model => model.BannedReason)
    Html.EnableClientValidation(true);
    
    <div class="section-header">
        <div class="title">
            @T("Common.Edit") - @Model.EmployeeId / @Model.FirstName @Model.LastName
            @Html.ActionLink("(" + T("Admin.Candidate.Candidate.BackToList") + ")", "Index")
        </div>
        <div class="options">
            <input type="submit" name="save" class="k-button" value="@T("Admin.Common.Save")" />
            <input type="submit" name="save-continue" class="k-button" value="@T("Admin.Common.SaveContinue")" />
            @Html.ActionLink(T("Admin.Common.Cancel").Text, "Details", "Candidate", new { guid = Model.CandidateGuid }, new { @class = "k-button" })
        </div>
    </div>
    <table class="adminContent">
        <tr>
            <td colspan="2">
                <div class="statisticsTitle">
                    @T("Admin.Candidate.AccountInformation")
                </div>
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.LabelFor(model => model.Email)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.Email)
                @Html.WfmValidationMessageFor(model => model.Email)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.Label("UserSameEmail", "Use email as username")
            </td>
            <td class="adminData">
                @Html.CheckBox("UserSameEmail", true)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.LabelFor(model => model.Username)
            </td>
            <td class="adminData required">
                @Html.EditorFor(model => model.Username)
                @Html.WfmValidationMessageFor(model => model.Username)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.LabelFor(model => model.EmployeeId)
            </td>
            <td class="adminData required">
                @Html.EditorFor(model => model.EmployeeId)
                @Html.WfmValidationMessageFor(model => model.EmployeeId)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.LabelFor(model => model.IsActive)
            </td>
            <td class="adminData">
                @Html.CheckBoxFor(model => model.IsActive)
            </td>
        </tr>
        <tr style="display:none" id="inactive-reason">
            <td class="adminTitle">
                @Html.LabelFor(model => model.InactiveReason)
            </td>
            <td class="adminData required">
                @(Html.Kendo().DropDownListFor(m=>m.InactiveReason).Name("InactiveReason")
                        .OptionLabel("--Select--")
                        .BindTo(reasonDropDownList)
                )
                @Html.WfmValidationMessageFor(model => model.InactiveReason)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.LabelFor(model => model.IsHot)
            </td>
            <td class="adminData">
                @Html.CheckBoxFor(model => model.IsHot)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.LabelFor(model => model.UseForDirectPlacement)
            </td>
            <td class="adminData">
                @Html.CheckBoxFor(model => model.UseForDirectPlacement)
            </td>
        </tr>
    </table>
    @*@Html.Partial("_CreateOrUpdate", Model)*@
    @Html.EditorFor(x => x, "CreateOrUpdateCandidate")
    <table class="adminContent">
        <tr>
            <td colspan="2">
                <div class="statisticsTitle">
                    @T("Admin.Candidate.AccountInformation.Optional")
                </div>
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.LabelFor(model => model.Email2)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.Email2)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.LabelFor(model => model.Education2)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.Education2)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.LabelFor(model => model.WebSite)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.WebSite)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.LabelFor(model => model.VetranTypeId)
            </td>
            <td class="adminData">
                @(Html.Kendo().DropDownList()
                    .Name("VetranTypeId")
                    .OptionLabel("--Select--")
                    .BindTo(vetranTypesDropDownList)
                )
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.LabelFor(model => model.SourceId)
            </td>
            <td class="adminData">
                @(Html.Kendo().DropDownList()
                    .Name("SourceId")
                    .OptionLabel("--Select--")
                    .BindTo(sourceDropDownList)
                )
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.LabelFor(model => model.EthnicTypeId)
            </td>
            <td class="adminData">
                @(Html.Kendo().DropDownList()
                    .Name("EthnicTypeId")
                    .OptionLabel("--Select--")
                    .BindTo(ethnicsDropDownList)
                )
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.LabelFor(model => model.DateAvailable)
            </td>
            <td class="adminData">
                @(Html.Kendo().DatePicker().HtmlAttributes(new { type = "text" })
                   .Name("DateAvailable").Format("MMMM d, yyyy")                          
                )               
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.LabelFor(model => model.CurrentEmployer)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.CurrentEmployer)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.LabelFor(model => model.CurrentPay)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.CurrentPay)
            </td>
        </tr>

        <tr>
            <td class="adminTitle">
                @Html.LabelFor(model => model.DesiredPay)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.DesiredPay)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.LabelFor(model => model.BestTimetoCall)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.BestTimetoCall)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.LabelFor(model => model.DisabilityStatus)
            </td>
            <td class="adminData">
                @Html.CheckBoxFor(model => model.DisabilityStatus)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.LabelFor(model => model.CanRelocate)
            </td>
            <td class="adminData">
                @Html.CheckBoxFor(model => model.CanRelocate)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.LabelFor(model => model.Note)
            </td>
            <td class="adminData">
                @Html.TextAreaFor(model => model.Note, new
                {
                   style = "height:100px;width:100%;",
                   @placeholder = HttpUtility.HtmlEncode(Html.DisplayNameFor(model => model.Note).ToHtmlString()), 
                 })
            </td>
        </tr>     
      

    </table>
    <div class="section-header">
        <div class="options">
            <input type="submit" name="save" class="k-button" value="@T("Admin.Common.Save")" />
            <input type="submit" name="save-continue" class="k-button" value="@T("Admin.Common.SaveContinue")" />
        </div>
        </div>
}
<script type="text/javascript">
    $(document).ready(function () {
        if ($("#IsActive").prop('checked') == true) {
            $("#InactiveReason").data("kendoDropDownList").value(null);
            $("#inactive-reason").hide();
        }
        else {
            $("#inactive-reason").show();
        }
    });
    $("#IsActive").change(function () {
        var isActive = $("#IsActive").prop('checked');
        if (isActive == true) {
            $("#InactiveReason").data("kendoDropDownList").value(null);
            $("#inactive-reason").hide();
        }
        else {
            $("#inactive-reason").show();
        }
    });

    $("#Email").bind("keyup", function () {
        if ($("#UserSameEmail").attr('checked') == "checked") {
            $("#Username").val($("#Email").val());
        }
    });

    $("#UserSameEmail").bind("click", function () {
        if ($("#UserSameEmail").attr('checked') == "checked") {
            $("#Username").val($("#Email").val());
        }
    });
</script>
