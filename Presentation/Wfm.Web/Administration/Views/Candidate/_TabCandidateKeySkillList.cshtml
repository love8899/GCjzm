@using Wfm.Services.Common
@{
    Layout = "";
    ViewBag.Title = T("Admin.Candidate.CandidateKeySkills").Text;


    var skillService = EngineContext.Current.Resolve<ISkillService>();
    var skills = skillService.GetAllSkills();
    
    
    
}
<script src="@Url.Content("~/Scripts/admin.common.js?version=1.8")" type="text/javascript"></script>

<script type="text/javascript">

    function onRead() {
        return {
            candidateGuid: '@(ViewBag.CandidateGuid)',
        };
    }

    function reloadGrid() {
        var grid = $("#candidatekeyskillmodel-grid").data("kendoGrid");
        grid.dataSource.page(1);
        grid.dataSource.read();
    }
    function onSync(e) {
        e.sender.read();
    }
</script>


<div class="section-header">
    <div class="title">
        @T("Admin.Candidate.CandidateKeySkills")
    </div>
    @*<div class="options">
        <button id="create-keyskill" class="k-button">@T("Common.Add")</button>
    </div>*@
</div>

<table class="adminContent">
    <tr>
        <td>
            @(Html.Kendo().Grid<CandidateKeySkillModel>()
                .Name("candidatekeyskillmodel-grid")
                .Columns(columns =>
                {                   
                    columns.Bound(x => x.KeySkill).EditorTemplateName("KeySkillEditor");                                     
                    columns.Bound(x => x.YearsOfExperience).Width(120);
                    columns.Bound(x => x.Note);
                    columns.Bound(x => x.LastUsedDate).EditorTemplateName("PastDateEditor").Format("{0:yyyy-MM-dd}").Width(180);
                    columns.Bound(x => x.UpdatedOnUtc).ClientTemplate("#=kendo.toString(UpdatedOn,'yyyy-MM-dd HH:mm')#").Width(120);
                    columns.Bound(x => x.CreatedOnUtc).ClientTemplate("#=kendo.toString(CreatedOn,'yyyy-MM-dd HH:mm')#").Width(120).Hidden(true);
                              
                })
                .EnableCustomBinding(false)
                .Reorderable(reorder => reorder.Columns(true))
                .Resizable(resize => resize.Columns(true))
                .ColumnMenu(d => d.Sortable(false))
                .Filterable()
                .Filterable(ftb => ftb.Mode(GridFilterMode.Menu))
                .Sortable()
                .Selectable()
                        .ToolBar(toolBar => { toolBar.Create(); toolBar.Save(); })
                .Editable(editable => editable.Mode(GridEditMode.InCell))
                .Pageable(x => x.PageSizes(new[] { 10, 20, 30 }).Refresh(true))
                .DataSource(dataSource => dataSource
                    .Ajax()
                    .PageSize(10)
                    .Batch(true)
                    .Model
                    (
                      model =>
                      {
                          model.Id(p => p.Id);
                          model.Field(field => field.CandidateGuid).Editable(false).DefaultValue(ViewBag.CandidateGuid);
                          model.Field(field => field.CandidateId).Editable(false).DefaultValue(ViewBag.CandidateId);
                          model.Field(field => field.KeySkill).Editable(true).DefaultValue(skills.Count<=0?"":skills[0].SkillName);                       
                          model.Field(field => field.UpdatedOnUtc).Editable(false).DefaultValue(DateTime.UtcNow);
                          model.Field(field => field.CreatedOnUtc).Editable(false).DefaultValue(DateTime.UtcNow);
                          model.Field(field => field.UpdatedOn).Editable(false).DefaultValue(DateTime.Now);
                          model.Field(field => field.CreatedOn).Editable(false).DefaultValue(DateTime.Now);
                      }
                    )
                    .Events(events => events.Error("error_handler").Sync("onSync"))
                    .Create(create => create.Action("CreateKeySkill", "Candidate"))
                    .Update(update => update.Action("EditKeySkill", "Candidate"))
                    .Read(read => read.Action("_TabCandidateKeySkillList", "Candidate").Data("onRead"))
                )
                .Filterable(filterable => filterable
                    .Extra(false)
                    .Operators(operators => operators
                        .ForString(str => str.Clear()
                            .Contains("Contains")
                            .IsEqualTo("Is equal to")
                            .IsNotEqualTo("Is not equal to")
                        )
                    )
                )
            )
        </td>
    </tr>
</table>

@*Kendo validation*@
<script>
    $(function () { 
        $("form").kendoValidator(); 
    });
</script>
