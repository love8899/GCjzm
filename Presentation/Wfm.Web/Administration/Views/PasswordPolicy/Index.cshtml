@using Wfm.Shared.Models.Policies
<div class="section-header">
    <div class="title">
        @T("Admin.Configuration.PasswordPolicy") @Html.ActionLink("(" + T("Admin.Common.BackToConfiguration") + ")", "Index", "Configuration")
    </div>
</div>

<table class="adminContent">
    <tr>
        <td>
            @(Html.Kendo().Grid<PasswordPolicyModel>()
                .Name("password-policy-grid")
                .Columns(columns =>
                {
                    columns.Bound(x => x.Code);
                    columns.Bound(x => x.MinLength);
                    columns.Bound(x => x.MaxLength);
                    columns.Bound(x => x.RequireUpperCase);
                    columns.Bound(x => x.RequireLowerCase);
                    columns.Bound(x => x.RequireNumber);
                    columns.Bound(x => x.RequireSymbol);
                    columns.Bound(x => x.PasswordLifeTime);
                    columns.Bound(x => x.PasswordHistory);
                    columns.Command(command => command.Destroy().Text(" ").HtmlAttributes(new { title=T("Common.Delete").Text})).Width(60);
                })
                .ToolBar(toolBar => { toolBar.Save(); toolBar.Create(); })
                .Editable(editable => editable.Mode(GridEditMode.InCell))
                .EnableCustomBinding(false)
                .Filterable()
                .Sortable()
                .ColumnMenu()
                .Selectable()
                .Pageable(x => x.PageSizes(new[] { 10, 20, 30, 50, 100 }).Refresh(true))
                .DataSource(ds => ds
                    .Ajax()
                    .ServerOperation(true)
                    .PageSize(20)
                    .Batch(true)
                    .Read(read => read.Action("Index", "PasswordPolicy"))
                    .Events(events => events.Error("error_handler"))
                    .Model(model =>
                    {
                        model.Id(p => p.Id);
                        model.Field(p => p.Code).Editable(true);
                        model.Field(p => p.MinLength).Editable(true);
                        model.Field(p => p.MaxLength).Editable(true);
                        model.Field(p => p.RequireUpperCase).Editable(true).DefaultValue(false);
                        model.Field(p => p.RequireLowerCase).Editable(true).DefaultValue(false);
                        model.Field(p => p.RequireNumber).Editable(true).DefaultValue(false);
                        model.Field(p => p.RequireSymbol).Editable(true).DefaultValue(false);
                        model.Field(p => p.PasswordLifeTime).Editable(true).DefaultValue(0);
                        model.Field(p => p.PasswordHistory).Editable(true).DefaultValue(0);
                        model.Field(p => p.CreatedOn).Editable(false).DefaultValue(DateTime.Now);
                        model.Field(p => p.UpdatedOn).Editable(false).DefaultValue(DateTime.Now);
                        model.Field(p => p.UpdatedOnUtc).Editable(false).DefaultValue(DateTime.UtcNow);
                        model.Field(p => p.CreatedOnUtc).Editable(false).DefaultValue(DateTime.UtcNow);
                    })
                    .Create(update => update.Action("_CreateNewPasswordPolicy", "PasswordPolicy"))
                    .Update(update => update.Action("_EditPasswordPolicy", "PasswordPolicy"))
                    .Destroy(update => update.Action("_DeletePasswordPolicy", "PasswordPolicy"))
                )
            )
        </td>
    </tr>
</table>

