@using Wfm.Shared.Models.Employees
@{
    var year = DateTime.Today.Year;
    var yearText = T("Common.Year").Text;
    var yearList = new SelectListItem[] { new SelectListItem() { Text = yearText + ": " +  (year - 1).ToString(), Value = (year - 1).ToString() },
                new SelectListItem() { Text = yearText + ": " +  year.ToString(), Value = year.ToString(), Selected = true },
                new SelectListItem() { Text = yearText + ": " +  (year + 1).ToString(), Value = (year + 1).ToString() }, };
}

<div class="section-header">
    <div class="options">
        @(Html.Kendo()
            .DropDownList()
            .Name("InquiryYear")
            .DataTextField("Text")
            .DataValueField("Value")
            .BindTo(yearList)
            .HtmlAttributes(new { id = "inquiry-year" })
            .Events(evt => evt.Change("reloadEntitlementGrid")))

        <button id="add-timeoff" class="k-button">@T("Admin.Employee.Timeoff.BooNew")</button>
    </div>
</div>
<table class="adminContent">
    <tr>
        <td>
            @(Html.Kendo().Grid<EmployeeTimeoffBalanceModel>()
                .Name("timeoff-entitlement-grid")
                .Columns(columns =>
                {
                    columns.Bound(x => x.Id).Width(80).Hidden();

                    columns.Bound(x => x.EmployeeId).Hidden();
                    columns.Bound(x => x.EmployeeName).Width(120).Hidden();
                    columns.Bound(x => x.EmployeeTimeoffTypeName).Width(120);
                    columns.Bound(x => x.EntitledTimeoffInHours).EditorTemplateName("DecimalNullable").Width(40);
                    columns.Bound(x => x.BookedHours).Width(40);
                    columns.Bound(x => x.AllowNegative)
                        .ClientTemplate("#if (AllowNegative == true) {# <span class='k-icon k-i-tick'/> #}else{# <span class='k-icon k-i-close'/> #}#")
                        .HeaderHtmlAttributes(new { style = "text-align:center" }).HtmlAttributes(new { style = "text-align:center" })
                        .Width(100);
                    columns.Bound(x => x.LatestBalanceInHours).Width(40);
                    columns.Bound(x => x.UpdatedOnUtc).ClientTemplate("#=kendo.toString(UpdatedOn,'yyyy-MM-dd HH:mm')#").Width(120).Hidden(true);
                    columns.Bound(x => x.CreatedOnUtc).ClientTemplate("#=kendo.toString(CreatedOn,'yyyy-MM-dd HH:mm')#").Width(120).Hidden(true);
                })
               .ToolBar(toolbar =>
                {
                    toolbar.Save();
                })
                .Editable(editable => editable.Mode(GridEditMode.InCell))
                .EnableCustomBinding(true)
                .Reorderable(reorder => reorder.Columns(true))
                .Resizable(resize => resize.Columns(true))
                .ColumnMenu(d => d.Sortable(false))
                .Filterable()
                .Filterable(ftb => ftb.Mode(GridFilterMode.Menu))
                .Sortable()
                .Selectable()
                .Pageable(x => x.PageSizes(new[] { 10, 20, 30, 50, 100 }).Refresh(true))
                .DataSource(dataSource => dataSource
                        .Ajax()
                        .Batch(true)
                        .ServerOperation(true)
                        .PageSize(20)
                        .Model(model =>
                        {
                            model.Id(m => m.Id);
                            model.Field(m => m.Id).Editable(false);
                            model.Field(m => m.EmployeeId).Editable(false);
                            model.Field(m => m.EmployeeName).Editable(false);
                            model.Field(m => m.EmployeeTimeoffTypeName).Editable(false);
                            model.Field(m => m.BookedHours).Editable(false);
                            model.Field(m => m.AllowNegative).Editable(false);
                            model.Field(m => m.LatestBalanceInHours).Editable(false);
                            model.Field(m => m.UpdatedOnUtc).Editable(false);
                            model.Field(m => m.CreatedOnUtc).Editable(false);
                        })
                        .Read(read => read.Action("_GetEmployeeTimeoffEntitlement", "Employee").Data("filterEntitlement"))
                        .Update(update => update.Action("_UpdateEmployeeTimeoffEntitlement", "Employee"))
                        .Create(update => update.Action("_UpdateEmployeeTimeoffEntitlement", "Employee"))
                )
                .Filterable(filterable => filterable
                    .Extra(false)
                    .Operators(operators => operators
                        .ForString(str => str.Clear()
                            .Contains("Contains")
                            .IsEqualTo("Is equal to")
                            .IsNotEqualTo("Is not equal to")
                        )
                    )
                )
            )
            </td>
        </tr>
    </table>
<div id="book-timeoff-dialog"></div>
