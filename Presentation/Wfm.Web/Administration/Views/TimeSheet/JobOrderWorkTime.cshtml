@using Wfm.Core.Domain.TimeSheet;
@using System.Web.Mvc;

@model IEnumerable<CandidateWorkTimeModel>
@{
    ViewBag.Title = T("Admin.TimeSheet.CandidateWorkTime").Text;
    var excludedStatusIds = new int[] { (int)CandidateWorkTimeStatus.Matched, };
    var availableWorkTimeStatus = CandidateWorkTimeStatus.PendingApproval.ToSelectList(false, excludedStatusIds).ToList();
}

<div class="section-header">
    <div class="title">
        @T("Admin.AttendancePreview.AttendanceDetails")
        @Html.ActionLink("(" + T("Admin.AttendancePreview.BackToAttendance") + ")", "CandidateAttendance", new { companyId = ViewBag.companyId, firstDateOfWeek = ViewBag.firstDateOFWeek.ToString("yyyy-MM-dd") })
    </div>
    <div class="options">
        <button id="show-joborder-details" class="k-primary">Job Order @ViewBag.jobOrderId</button>
        @(Html.Kendo().Tooltip()
                 .For("#show-joborder-details")
                 .Content(ViewBag.jobOrderStartDate + " ~ " + ViewBag.jobOrderEndDate)
        )
    </div>
</div>

<script type="text/javascript">
    $("#show-joborder-details").bind("click", function () {
        var url = '@Url.Action("Details", "JobOrder", new { guid = "__id__" })';
        window.open(url.replace('__id__', '@ViewBag.jobOrderGuid'), '_blank');
    });
</script>

<table class="adminContent">
    <tr>
        <td>
            @(Html.Kendo().Grid<CandidateWorkTimeModel>()
                .Name("candidateworktime-grid")
                .Columns(columns =>
                {
                    columns.Bound(x => x.Id).Width(60).Hidden(true)
                        .HtmlAttributes(new { id = "worktime-id" });

                    columns.Bound(x => x.EmployeeId)
                        .ClientTemplate(@Html.ActionLink("#=EmployeeId#", "Details", "Candidate", new { guid = "#=CandidateGuid#" }, new { target = "_blank" }).ToHtmlString())
                        .Width(90)
                        .HtmlAttributes(new { id = "candidate-id" });

                    columns.Bound(x => x.EmployeeLastName)
                        .ClientTemplate("#if (CandidateWorkTimeStatusId != 13 && NetWorkTimeInHours<=1){# <span class='worktime-warning'>#=EmployeeLastName#</span> #}else{# #=EmployeeLastName# #}#")
                        .Width(100);
                    columns.Bound(x => x.EmployeeFirstName)
                        .ClientTemplate("#if (CandidateWorkTimeStatusId != 13 && NetWorkTimeInHours<=1){# <span class='worktime-warning'>#=EmployeeFirstName#</span> #}else{# #=EmployeeFirstName# #}#")
                        .Width(100);

                    columns.Bound(x => x.JobOrderId).Hidden(true)
                        .ClientTemplate(@Html.ActionLink("#=JobOrderId#", "Details", "JobOrder", new { guid = "#=JobOrderGuid#" }, new { target = "_blank" }).ToHtmlString())
                        .Width(60);

                    columns.Bound(x => x.JobTitle);

                    columns.Bound(x => x.CompanyName).Title("Company").Hidden(true);
                    columns.Bound(x => x.LocationName).Hidden(true);
                    columns.Bound(x => x.DepartmentName).Hidden(true);
                    columns.Bound(x => x.ContactName).Hidden(true);

                    columns.Bound(x => x.Year).Width(60).Hidden(true);
                    columns.Bound(x => x.WeekOfYear).Hidden(true)
                        .ClientTemplate("#=WeekOfYear#/#=Year#")
                        .Width(60);

                    columns.Bound(x => x.JobStartDateTime).Title(T("Common.StartDate").Text).Format("{0:yyyy-MM-dd HH:mm}").Width(120)
                        .HtmlAttributes(new { id = "joborder-startdate" });
                    columns.Bound(x => x.ClockIn).Format("{0:yyyy-MM-dd HH:mm}").Width(120);

                    columns.Bound(x => x.JobEndDateTime).Title(T("Common.EndDate").Text).Format("{0:yyyy-MM-dd HH:mm}").Width(120);
                    columns.Bound(x => x.ClockOut).Format("{0:yyyy-MM-dd HH:mm}").Width(120);

                    columns.Bound(x => x.ClockDeviceUid).Hidden(true);
                    columns.Bound(x => x.SmartCardUid).Hidden(true);

                    columns.Bound(x => x.JobOrderDurationInHours)
                        .HtmlAttributes(new { align = "right" }).Format("{0:n2}").Width(60);

                    columns.Bound(x => x.ClockTimeInHours)
                        .ClientTemplate("#if (ClockTimeInHours<=1){# <span class='worktime-warning'>#= kendo.format('{0:n2}',ClockTimeInHours) #</span> #}else{# #= kendo.format('{0:n2}',ClockTimeInHours) # #}#")
                        .HtmlAttributes(new { align = "right" }).Width(60);

                    columns.Bound(x => x.GrossWorkTimeInHours)
                        .HtmlAttributes(new { align = "right" }).Format("{0:n2}").Width(60);

                    columns.Bound(x => x.AdjustmentInMinutes)
                        .Width(60);

                    columns.Bound(x => x.NetWorkTimeInHours)
                        .HtmlAttributes(new { @class = "boldColumn", align = "right" })
                        .ClientTemplate("#if (CandidateWorkTimeStatusId == 13) {# #} else if (NetWorkTimeInHours<=1){# <span class='worktime-warning'>#= kendo.format('{0:n2}',NetWorkTimeInHours) #</span> #}else{# <span class='boldColumn'>#= kendo.format('{0:n2}',NetWorkTimeInHours) #</span> #}#")
                        .ClientGroupFooterTemplate("<span style='float: right'>#= kendo.format('{0:n2}',sum) #</span>")
                        .Width(60);

                    columns.ForeignKey(x => x.CandidateWorkTimeStatusId, availableWorkTimeStatus, "Value", "Text")
                        .Width(100);

                    columns.Bound(x => x.Note).Hidden(true);

                    columns.Bound(x => x.ApprovedByName).Hidden(true);
                    columns.Bound(x => x.ApprovedOnUtc)
                        .ClientTemplate("#=kendo.toString(ApprovedOnUtc,'yyyy-MM-dd HH:mm')#")
                        .Width(120).Hidden(true);

                    columns.Bound(x => x.UpdatedOnUtc).ClientTemplate("#=kendo.toString(UpdatedOn,'yyyy-MM-dd HH:mm')#").Width(120).Hidden(true);
                    columns.Bound(x => x.CreatedOnUtc).ClientTemplate("#=kendo.toString(CreatedOn,'yyyy-MM-dd HH:mm')#").Width(120).Hidden(true);
                })
                .EnableCustomBinding(true)
                .Reorderable(reorder => reorder.Columns(true))
                .Resizable(resize => resize.Columns(true))
                .Filterable()
                .Sortable()
                .ColumnMenu()
                .Selectable()
                .Pageable(x => x.PageSizes(new[] { 10, 20, 30, 50, 100 }).Refresh(true))
                .DataSource(ds => ds
                    .Ajax()
                    .ServerOperation(false)
                    .PageSize(30)
                    .Sort(sort => sort.Add("JobStartDateTime").Ascending())
                    .Aggregates(aggregates =>
                    {
                        aggregates.Add(a => a.NetWorkTimeInHours).Sum();
                    })
                    .Group(groups => groups.Add(x => x.EmployeeId))
                    .Read(read => read.Action("JobOrderWorkTime", "TimeSheet").Data("onRead"))
                    .Events(events => events.Error("onError"))
                )
                .Filterable(filterable => filterable
                    .Extra(false)
                    .Operators(operators => operators
                        .ForString(str => str.Clear()
                            .Contains("Contains")
                            .IsEqualTo("Is equal to")
                            .IsNotEqualTo("Is not equal to")
                        )
                    )
                )
            )
        </td>
    </tr>
</table>

<script type="text/javascript">

    function onRead(e) {
        return {
            guid: '@ViewBag.jobOrderGuid',
            firstDateOfWeek: '@ViewBag.firstDateOfWeek'
        };
    }

    function onError(e) {
        alert(e.status);
    }

    function reloadGrid() { $("#candidateworktime-grid").data("kendoGrid").read(); }

</script>