@using Wfm.Core;
@using Wfm.Services.JobOrders;
@using Wfm.Services.Common;


@model JobOrderModel


@{
    var shiftService = EngineContext.Current.Resolve<IShiftService>();
    var jobOrderTypeService = EngineContext.Current.Resolve<IJobOrderTypeService>();
    var jobOrderCategoryService = EngineContext.Current.Resolve<IJobOrderCategoryService>();
    var jobOrderStatusService = EngineContext.Current.Resolve<IJobOrderStatusService>();

    var joborderCategories = jobOrderCategoryService.GetAllJobOrderCategories();
    var joborderCategoriesDropDownList = new List<SelectListItem>();
    foreach (var f in joborderCategories)
    {
        var item = new SelectListItem()
        {
            Text = f.CategoryName,
            Value = f.Id.ToString()
        };
        joborderCategoriesDropDownList.Add(item);
    }

    var joborderTypes = jobOrderTypeService.GetAllJobOrderTypes();
    var joborderTypesDropDownList = new List<SelectListItem>();
    foreach (var f in joborderTypes)
    {
        var item = new SelectListItem()
        {
            Text = f.JobOrderTypeName,
            Value = f.Id.ToString()
        };
        joborderTypesDropDownList.Add(item);
    }

    var joborderStatus = jobOrderStatusService.GetAllJobOrderStatus();
    var joborderStatusDropDownList = new List<SelectListItem>();
    foreach (var f in joborderStatus)
    {
        var item = new SelectListItem()
        {
            Text = f.JobOrderStatusName,
            Value = f.Id.ToString()
        };
        joborderStatusDropDownList.Add(item);
    }
}


@Html.ValidationSummary(true)
@Html.HiddenFor(model => model.JobOrderGuid)
@Html.HiddenFor(model => model.JobPostingId)
@Html.HiddenFor(model => model.CreatedOnUtc)
@Html.HiddenFor(model => model.UpdatedOnUtc)
@Html.HiddenFor(model => model.FranchiseId)
@Html.HiddenFor(model => model.EnteredBy)
@Html.HiddenFor(model => model.IsDeleted)
@Html.HiddenFor(model=>model.CompanyGuid)
@Html.HiddenFor(model => model.FranchiseGuid)
@Html.HiddenFor(model => model.MonsterPostingId)
<table class="adminContent">
    <tr>
        <td colspan="4">
            <div class="statisticsTitle">
                @T("Common.CompanyInformation")
            </div>
        </td>
    </tr>
    <tr>
        <td class="adminTitle">
            @Html.LabelFor(model => model.CompanyId)
        </td>
        <td class="adminData required">
            @(Html.Kendo().DropDownList()
                .Name("CompanyId")
                .Items(i=>i.Add().Text(Model.CompanyName).Value(Model.CompanyId.ToString()).Selected(true))
                .Enable(false)
            )
            @Html.HiddenFor(model => model.CompanyId)
        </td>

        <td class="adminTitle">
            @Html.LabelFor(model => model.CompanyLocationId)
        </td>
        <td class="adminData required">
            @(Html.Kendo().DropDownList()
                .Name("CompanyLocationId")
                .OptionLabel("--Select--")
                .DataTextField("Text")
                .DataValueField("Value")
                .DataSource(source => source.Read(read => read.Action("GetCascadeLocations", "Common").Data("filterLocations")).ServerFiltering(true))
                .Enable(false)
            )
            <script> function filterLocations() { return { companyid: $("#CompanyId").val() }; } </script>
            @Html.HiddenFor(model => model.CompanyLocationId)
        </td>
    </tr>
    <tr>
        <td class="adminTitle">
            @Html.LabelFor(model => model.CompanyDepartmentId)
        </td>
        <td class="adminData">
            @(Html.Kendo().DropDownList()
                .Name("CompanyDepartmentId")
                .OptionLabel("--Select--")
                .DataTextField("Text")
                .DataValueField("Value")
                .DataSource(source => source.Read(read => read.Action("GetCascadeDepartments", "Common").Data("filterDepartments")).ServerFiltering(true))
                .Enable(false)
            )
            <script> function filterDepartments() { return { locationid: $("#CompanyLocationId").val() }; } </script>
            @Html.HiddenFor(model => model.CompanyDepartmentId)
        </td>
    </tr>
    @Html.HiddenFor(model => model.CompanyContactId)
    @*<tr>
        <td class="adminTitle">
            @Html.LabelFor(model => model.CompanyContactId)
        </td>
        <td class="adminData">
            @(Html.Kendo().DropDownList()
                .Name("CompanyContactId")
                .OptionLabel("--Select--")
                .DataTextField("Text")
                .DataValueField("Value")
                .DataSource(source => source.Read(read => read.Action("GetCascadeContacts", "JobOrder").Data("filterContacts")).ServerFiltering(true))
                .Enable(false)
            )
            <script> function filterContacts() { return { companyid: $("#CompanyId").val() }; } </script>
        </td>
    </tr>*@
    <tr>
        <td colspan="4">
            <div class="statisticsTitle">
                @T("Admin.JobOrder.JobOrder.JobOrderInformation")
            </div>
        </td>
    </tr>
    <tr>
        <td class="adminTitle">
            @Html.LabelFor(model => model.Id)
        </td>
        <td class="adminData">
            @Html.DisplayFor(model => model.Id)
            @Html.HiddenFor(model => model.Id)
        </td>

        @*<td class="adminTitle">
            @Html.LabelFor(model => model.IsHot)
        </td>
        <td class="adminData">
            @Html.DisplayFor(model => model.IsHot)
        </td>*@
        @Html.HiddenFor(model => model.IsHot)

        <td class="adminTitle">
            @Html.LabelFor(model => model.AllowTimeEntry)
        </td>
        <td class="adminData">
            @Html.DisplayFor(model => model.AllowTimeEntry)
            @Html.HiddenFor(model => model.AllowTimeEntry)
        </td>
    </tr>
    @*<tr>
            <td class="adminTitle">
                @Html.LabelFor(model => model.IsPublished)
            </td>
            <td class="adminData">
                @Html.DisplayFor(model => model.IsPublished)
            </td>
        </tr>*@
    @Html.HiddenFor(model => model.IsPublished)
    @*<tr>
            <td class="adminTitle">
                @Html.LabelFor(model => model.IsInternalPosting)
            </td>
            <td class="adminData">
                @Html.DisplayFor(model => model.IsInternalPosting)
                @Html.HiddenFor(model => model.IsInternalPosting)
            </td>
        </tr>*@
    @Html.HiddenFor(model => model.IsInternalPosting)
    <tr>
        <td class="adminTitle">
            @Html.LabelFor(model => model.AllowSuperVisorModifyWorkTime)
        </td>
        <td class="adminData">
            @Html.DisplayFor(model => model.AllowSuperVisorModifyWorkTime)
            @Html.HiddenFor(model => model.AllowSuperVisorModifyWorkTime)
        </td>

    @*<tr>
            <td class="adminTitle">
                @Html.LabelFor(model => model.AllowDailyApproval)
            </td>
            <td class="adminData">
                @Html.DisplayFor(model => model.AllowDailyApproval)
                @Html.HiddenFor(model => model.AllowDailyApproval)
            </td>
        </tr>*@

        <td class="adminTitle">
            @Html.LabelFor(model => model.JobTitle)
        </td>
        <td class="adminData required">
            @Html.DisplayFor(model => model.JobTitle)
            @Html.HiddenFor(model => model.JobTitle)
        </td>
    </tr>
    <tr>
        <td class="adminTitle">
            @Html.LabelFor(model => model.CompanyJobNumber)
        </td>
        <td class="adminData">
            @Html.DisplayFor(model => model.CompanyJobNumber)
            @Html.HiddenFor(model => model.CompanyJobNumber)
        </td>

        <td class="adminTitle">
            @Html.LabelFor(model => model.JobOrderCategoryId)
        </td>
        <td class="adminData required">
            @(Html.Kendo().DropDownList()
                .Name("JobOrderCategoryId")
                .OptionLabel("--Select--")
                .BindTo(joborderCategoriesDropDownList)
                .Enable(false)
            )
            @Html.HiddenFor(model => model.JobOrderCategoryId)
        </td>
    </tr>
    <tr>
        <td class="adminTitle">
            @Html.LabelFor(model => model.JobOrderTypeId)
        </td>
        <td class="adminData required">
            @(Html.Kendo().DropDownList()
                .Name("JobOrderTypeId")
                .OptionLabel("--Select--")
                .BindTo(joborderTypesDropDownList)
                .Enable(false)
            )
            @Html.HiddenFor(model => model.JobOrderTypeId)
        </td>

        <td class="adminTitle">
            @Html.LabelFor(model => model.ShiftId)
        </td>
        <td class="adminData required">
            @(Html.Kendo().DropDownListFor(model => model.ShiftId)
                .OptionLabel("--Select--")
                .DataTextField("Text").DataValueField("Value")
                .DataSource(source => source.Read(read => read.Action("GetCascadeShift", "JobOrder").Data("filterShifts")).ServerFiltering(true))
                .Enable(false)
            )
            <script> function filterShifts() { return { companyid: $("#CompanyId").val() }; } </script>
            @Html.HiddenFor(model => model.ShiftId)
        </td>
    </tr>
    <tr>
       
        <td class="adminTitle">
            @Html.LabelFor(model => model.PositionId)
        </td>
        <td class="adminData required">
             @(Html.Kendo().DropDownListFor(model=>model.PositionId)               
                .OptionLabel("--Select--")
                .DataTextField("Text")
                .DataValueField("Value")
                .DataSource(source => source.Read(read => read.Action("GetCascadePositions", "Common").Data("filterPositions")).ServerFiltering(true))
                .Enable(false)              
            )
            <script> function filterPositions() { return { companyId: $("#CompanyId").val() }; } </script>
            @Html.HiddenFor(model => model.PositionId)
          
        </td>       

        <td class="adminTitle">
            @Html.LabelFor(model => model.ShiftSchedule)
        </td>
        <td class="adminData">
            @Html.DisplayFor(model => model.ShiftSchedule)
            @Html.HiddenFor(model => model.ShiftSchedule)
        </td>
    </tr>
    <tr>
        <td class="adminTitle">
            @Html.LabelFor(model => model.StartDate)
        </td>
        <td class="adminData required">
            @(Html.Kendo().DatePicker().HtmlAttributes(new { type = "text" })
                .Name("StartDate")
                .Format("dddd, MMMM d, yyyy")
                .Enable(false)
            )
            @Html.HiddenFor(model => model.StartDate)
        </td>

        <td class="adminTitle">
            @Html.LabelFor(model => model.StartTime)
        </td>
        <td class="adminData required">
            @(Html.Kendo().TimePicker()
                .Name("StartTime")
                .Enable(false)
                .HtmlAttributes(new { type = "text" })
            )
            @Html.HiddenFor(model => model.StartTime)
        </td>
    </tr>
    <tr>
        <td class="adminTitle">
            @Html.LabelFor(model => model.EndTime)
        </td>
        <td class="adminData required">
            @(Html.Kendo().TimePicker()
                .Name("EndTime")
                .Enable(false)
                .HtmlAttributes(new { type = "text" })
            )
            @Html.HiddenFor(model => model.EndTime)
        </td>

        <td class="adminTitle">
            @Html.LabelFor(model => model.LabourType, T("Admin.JobOrder.LabourType").Text)
        </td>
        <td class="adminData">
            @Model.LabourTypeName
            @Html.HiddenFor(model => model.LabourType)
        </td>
    </tr>
    <tr>
        <td class="adminTitle">
            @Html.LabelFor(model => model.RecruiterId)
        </td>
        <td class="adminData required">
            @(Html.Kendo().DropDownList()
                .Name("RecruiterId")
                .OptionLabel("--Select--")
                .DataTextField("Text")
                .DataValueField("Value")
                .DataSource(source => source.Read(read => read.Action("GetCascadeRecruiters", "JobOrder").Data("filterRecruiters")))
            )
            @Html.WfmValidationMessageFor(model => model.RecruiterId)
        </td>
        <td class="adminTitle">
            @Html.LabelFor(model => model.OwnerId)
        </td>
        <td class="adminData required">
            @(Html.Kendo().DropDownList()
                .Name("OwnerId")
                .OptionLabel("--Select--")
                .DataTextField("Text")
                .DataValueField("Value")
                .DataSource(source => source.Read(read => read.Action("GetCascadeRecruiters", "JobOrder").Data("filterOwners")))
            )
            @Html.WfmValidationMessageFor(model => model.OwnerId)
        </td>
    </tr>
    <tr>
        <td class="adminTitle">
            @Html.LabelFor(model => model.JobOrderStatusId)
        </td>
        <td class="adminData required">
            @(Html.Kendo().DropDownList()
                .Name("JobOrderStatusId")
                .OptionLabel("--Select--")
                .BindTo(joborderStatusDropDownList)
                .Enable(false)
            )
            @Html.HiddenFor(model => model.JobOrderStatusId)
        </td>
    </tr>
    <tr>
        <td class="adminTitle">
            @Html.LabelFor(model => model.JobDescription)
        </td>
        <td class="adminData required">
            @Html.Raw(Model.JobDescription)
            @Html.HiddenFor(model => model.JobDescription)
        </td>
    </tr>
    <tr>
        <td class="adminTitle">
            @Html.LabelFor(model => model.Note)
        </td>
        <td class="adminData">
            @Html.TextAreaFor(model => model.Note, new { style = "height:80px;width:50%;" })
        </td>
    </tr>
    <tr>
        <td colspan="4">
            <div class="statisticsTitle">
                @T("Admin.JobOrder.JobOrder.JobOrderPaymentInformation")
            </div>
        </td>
    </tr>
    <tr>
        <td class="adminTitle">
            @T("Admin.JobOrder.JobOrder.Fields.BillingRateCode")
        </td>
        <td class="adminData required">
            @(Html.Kendo().DropDownList()
                .Name("BillingRateCode")
                .OptionLabel("--Select--")
                .DataTextField("Text")
                .DataValueField("Value")
                .DataSource(source => source.Read(read => read.Action("GetCascadeCompanyBillingRateCodes", "JobOrder").Data("filterBillingRateCodes")).ServerFiltering(true))
                .Enable(false)
            )
            <script> function filterBillingRateCodes() { return { companyId: $("#CompanyId").val(), locationId:$("#CompanyLocationId").val(), vendorId: @Model.FranchiseId}; } </script>
            @Html.HiddenFor(model => model.BillingRateCode)
        </td>

        <td class="adminTitle">
            @Html.LabelFor(model => model.SchedulePolicyId)
        </td>
        <td class="adminData">
            @(Html.Kendo().DropDownList()
                .Name("SchedulePolicyId")
                .OptionLabel("--Select--")
                .DataTextField("Text")
                .DataValueField("Value")
                .DataSource(source => source.Read(read => read.Action("GetCascadeCompanyPolicy", "JobOrder").Data("filterCompanyPolicy")).ServerFiltering(true))
                .Enable(false)
            )
            <script> function filterCompanyPolicy() { return { companyid: $("#CompanyId").val() }; } </script>
            @Html.HiddenFor(model => model.SchedulePolicyId)
        </td>
    </tr>
    <tr>
        <td class="adminTitle">
            @Html.LabelFor(model => model.Salary)
        </td>
        <td class="adminData">
            @Html.DisplayFor(model => model.Salary)
            @Html.HiddenFor(model => model.Salary)
        </td>
    </tr>
    <tr>
        <td colspan="4">
            <div class="statisticsTitle">
                @T("Common.WorkingDays")
                @Html.ValidationMessageFor(model => model.SundaySwitch)
            </div>
        </td>
    </tr>
    <tr>
        <td class="adminTitle">@Html.LabelFor(model => model.MondaySwitch)</td>
        <td class="adminData">
        @Html.DisplayFor(model => model.MondaySwitch)
        @Html.HiddenFor(model => model.MondaySwitch)
        </td>
        <td class="adminTitle">@Html.LabelFor(model => model.TuesdaySwitch)</td>
        <td class="adminData">@Html.DisplayFor(model => model.TuesdaySwitch)
        @Html.HiddenFor(model => model.TuesdaySwitch)
        </td>
    </tr>
    <tr>
        <td class="adminTitle">@Html.LabelFor(model => model.WednesdaySwitch)</td>
        <td class="adminData">@Html.DisplayFor(model => model.WednesdaySwitch)
        @Html.HiddenFor(model => model.WednesdaySwitch)
        </td>
        <td class="adminTitle">@Html.LabelFor(model => model.ThursdaySwitch)</td>
        <td class="adminData">@Html.DisplayFor(model => model.ThursdaySwitch)
        @Html.HiddenFor(model => model.ThursdaySwitch)
        </td>
    </tr>
    <tr>
        <td class="adminTitle">@Html.LabelFor(model => model.FridaySwitch)</td>
        <td class="adminData">@Html.DisplayFor(model => model.FridaySwitch)
        @Html.HiddenFor(model => model.FridaySwitch)
        </td>
        <td class="adminTitle">@Html.LabelFor(model => model.SaturdaySwitch)</td>
        <td class="adminData">@Html.DisplayFor(model => model.SaturdaySwitch)
        @Html.HiddenFor(model => model.SaturdaySwitch)
        </td>
    </tr>
    <tr>
        <td class="adminTitle">@Html.LabelFor(model => model.SundaySwitch)</td>
        <td class="adminData">@Html.DisplayFor(model => model.SundaySwitch)
        @Html.HiddenFor(model => model.SundaySwitch)
        </td>
        <td class="adminTitle">@Html.LabelFor(model => model.IncludeHolidays)</td>
        <td class="adminData">@Html.DisplayFor(model => model.IncludeHolidays)
        @Html.HiddenFor(model => model.IncludeHolidays)
        </td>
    </tr>
    <tr>
        <td colspan="4">
            <div class="statisticsTitle">
                @T("Common.OtherInformation")
            </div>
        </td>
    </tr>
    <tr>
        <td class="adminTitle">
            @Html.LabelFor(model => model.RequireSafetyShoe)
        </td>
        <td class="adminData">
            @Html.DisplayFor(model => model.RequireSafetyShoe)
            @Html.HiddenFor(model => model.RequireSafetyShoe)
        </td>

        <td class="adminTitle">
            @Html.LabelFor(model => model.RequireSafeEquipment)
        </td>
        <td class="adminData">
            @Html.DisplayFor(model => model.RequireSafeEquipment)
            @Html.HiddenFor(model => model.RequireSafeEquipment)
        </td>
    </tr>
    <tr>
        <td class="adminTitle">
            @Html.LabelFor(model => model.HiringDurationExpiredDate)
        </td>
        <td class="adminData">
            @(Html.Kendo().DatePicker().HtmlAttributes(new { type = "text" })
                .Name("HiringDurationExpiredDate")
                .Format("dddd, MMMM d, yyyy")
                .Enable(false)
            )
            @Html.HiddenFor(model => model.HiringDurationExpiredDate)
        </td>

        <td class="adminTitle">
            @Html.LabelFor(model => model.EstimatedFinishingDate)
        </td>
        <td class="adminData">
            @(Html.Kendo().DatePicker().HtmlAttributes(new { type = "text" })
                .Name("EstimatedFinishingDate")
                .Format("dddd, MMMM d, yyyy")
                .Enable(false)
            )
            @Html.HiddenFor(model => model.EstimatedFinishingDate)
        </td>
    </tr>
    <tr>
        <td class="adminTitle">
            @Html.LabelFor(model => model.EstimatedMargin)
        </td>
        <td class="adminData">
            @Html.DisplayFor(model => model.EstimatedMargin)
            @Html.HiddenFor(model => model.EstimatedMargin)
        </td>

        <td class="adminTitle">
            @Html.LabelFor(model => model.HoursPerWeek)
        </td>
        <td class="adminData">
            @Html.DisplayFor(model => model.HoursPerWeek)
            @Html.HiddenFor(model => model.HoursPerWeek)
        </td>
    </tr>
    <tr>
        <td class="adminTitle">
            Required tests
        </td>
        <td class="adminData">
            @Html.Action("JobOrderTest", new { JobOrderId = Model.Id, editMode = false })
        </td>
    </tr>
</table>


<script type="text/javascript">

    function filterRecruiters() { return { companyGuid: $("#CompanyGuid").val(), vendorGuid: '@(Model.FranchiseGuid)' }; }

    function filterOwners() { return { companyGuid: $("#CompanyGuid").val(), vendorGuid: '@(Model.FranchiseGuid)', includeAdmin: true }; }

</script>
