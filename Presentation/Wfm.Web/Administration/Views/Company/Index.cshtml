@using Wfm.Services.Security

@model IEnumerable<CompanyModel>

@{
    ViewBag.Title = T("Common.Companies").Text;

    var permissionService = EngineContext.Current.Resolve<IPermissionService>();
    var invoiceIntervalService = EngineContext.Current.Resolve<Wfm.Services.Invoices.IInvoiceIntervalService>();
    var invoiceIntervals = invoiceIntervalService.GetAllInvoiceIntervals();

    ViewBag.SearchArea = "Company";
}

<div class="section-header">
    <div class="title">@T("Common.Companies")</div>
    @*<div class="options">
        @if (permissionService.Authorize("ManageCompanies"))
        {
            @Html.ActionLink(T("Common.Add").Text, "Create", null, new { @class = "k-button" });
        }
    </div>*@
</div>

<table class="adminContent">
    <tr>
        <td>
            @(Html.Kendo().Grid<CompanyModel>()
                .Name("company-grid")
                .Columns(columns =>
                {
                    columns.Bound(x => x).Width(40).Sortable(false).Filterable(false)
                        .ClientTemplate("#if (IsHot == true) {# <img alt='' src='" + Url.Content("~/Administration/Content/images/hot-true.png") + "' /> #} #")
                        .HeaderHtmlAttributes(new { style = "text-align:center" }).HtmlAttributes(new { style = "text-align:center" })
                        .Title("");

                    columns.Bound(x => x.Id).Width(150);
                    
                    columns.Bound(x => x.CompanyName)
                        .Filterable(ftb => ftb.Cell(cell => cell.Operator("contains")))
                        .Template(x => Html.ActionLink(x.CompanyName, "Details", new { guid = x.CompanyGuid }, new { }))
                        .ClientTemplate(@Html.ActionLink("#=CompanyName#", "Details", new { guid = "#=CompanyGuid#" }).ToHtmlString());

                    columns.Bound(x => x.WebSite)
                        .Filterable(ftb => ftb.Cell(cell => cell.Operator("contains")));

                    columns.Bound(x => x.KeyTechnology)
                        .Filterable(ftb => ftb.Cell(cell => cell.Operator("contains")));

                    columns.ForeignKey("InvoiceIntervalId", invoiceIntervals, "Id", "Code").Title(T("Admin.Common.Invoice.Interval").Text);

                    columns.Bound(x => x.Note)
                        .Filterable(ftb => ftb.Cell(cell => cell.Operator("contains")))
                        .Hidden(true);

                    columns.Bound(x => x.IsActive)
                        .ClientTemplate("#if (IsActive == true) {# <span class='k-icon k-i-tick'/> #}else{# <span class='k-icon k-i-close'/> #}#")
                        .HeaderHtmlAttributes(new { style = "text-align:center" }).HtmlAttributes(new { style = "text-align:center" })
                        .Width(160);


                    if (permissionService.Authorize("ManageCompanies"))
                    {
                        columns.Bound(x => x.Id).Filterable(false).Sortable(false)
                            .ClientTemplate("<a class='-k-button' href=\"" + @Url.Content("~/Admin/Company/Edit?guid=") + "#= CompanyGuid #\">" + "<span class='k-icon k-i-pencil'></span></a>")
                            .HeaderHtmlAttributes(new { style = "text-align:center" }).HtmlAttributes(new { style = "text-align:center" })
                            .Width(80)
                            .Title(T("Admin.Common.Edit").Text);
                    }


                    columns.Bound(x => x.UpdatedOnUtc).ClientTemplate("#=kendo.toString(UpdatedOn,'yyyy-MM-dd HH:mm')#")
                        .Filterable(ftb => ftb.Cell(cell => cell.Enabled(false)))
                        .Width(120);
                    columns.Bound(x => x.CreatedOnUtc).ClientTemplate("#=kendo.toString(CreatedOn,'yyyy-MM-dd HH:mm')#")
                        .Filterable(ftb => ftb.Cell(cell => cell.Enabled(false)))
                        .Width(120).Hidden(true);
                })
                .EnableCustomBinding(true)
                .Reorderable(reorder => reorder.Columns(true))
                .Resizable(resize => resize.Columns(true))
                .ColumnMenu(d => d.Sortable(true))
                .Filterable(ftb => ftb.Mode(GridFilterMode.Row))
                .Sortable()
                .Selectable()
                .Pageable(x => x.PageSizes(new[] { 10, 20, 30, 50, 100 }).Refresh(true))
                .DataSource(ds => ds
                    .Ajax()
                    .ServerOperation(true)
                    .PageSize(20)
                    .Read(read => read.Action("Index", "Company"))
                )
                //.Filterable(filterable => filterable
                //    .Extra(false)
                //    .Operators(operators => operators
                //        .ForString(str => str.Clear()
                //            .Contains("Contains")
                //            .IsEqualTo("Is equal to")
                //            .IsNotEqualTo("Is not equal to")
                //        )
                //    )
                //)
)
        </td>
    </tr>
</table>
