@using Wfm.Services.Security
@using Wfm.Services.DirectoryLocation;
@{
    //var companyGuid = ViewBag.CompanyGuid;
    var permissionService = EngineContext.Current.Resolve<IPermissionService>();

    var cityService = EngineContext.Current.Resolve<ICityService>();
    var stateProvinceService = EngineContext.Current.Resolve<IStateProvinceService>();
    var countryService = EngineContext.Current.Resolve<ICountryService>();
    var cities = cityService.GetAllCities();
    var stateProvinces = stateProvinceService.GetAllStateProvinces();
    var countries = countryService.GetAllCountries();
}
<script src="@Url.Content("~/Scripts/admin.common.js?version=1.8")" type="text/javascript"></script>
<table class="adminContent">
    <tr>
        <td>
            @(Html.Kendo().Grid<CompanyLocationListModel>()
                .Name("companylocation-grid")
                .Columns(columns =>
                {
                    columns.Bound(x => x.LocationName).HtmlAttributes(new { style = "white-space: normal" });
                    columns.Bound(x => x.AddressLine1).HtmlAttributes(new { style = "white-space: normal" });
                    columns.Bound(x => x.AddressLine2).HtmlAttributes(new { style = "white-space: normal" });
                    columns.Bound(x => x.AddressLine3).HtmlAttributes(new { style = "white-space: normal" }).Hidden();

                    columns.ForeignKey(x => x.CountryId, countries, "Id", "CountryName").Width(150).HtmlAttributes(new { style = "white-space: normal" });
                    columns.ForeignKey(x => x.StateProvinceId, stateProvinces, "Id", "StateProvinceName").Width(150).EditorTemplateName("StateProvinceEditor").HtmlAttributes(new { style = "white-space: normal" });
                    columns.ForeignKey(x => x.CityId, cities, "Id", "CityName").Width(150).EditorTemplateName("CityEditor").HtmlAttributes(new { style = "white-space: normal" });
                    columns.Bound(x => x.PostalCode).EditorTemplateName("PostalCodeEditor").Width(100);

                    columns.Bound(x => x.PrimaryPhone).ClientTemplate("#= prettyPhone(PrimaryPhone) #").EditorTemplateName("PhoneEditor").Width(120);
                    columns.Bound(x => x.SecondaryPhone).ClientTemplate("#= prettyPhone(SecondaryPhone) #").EditorTemplateName("PhoneEditor").Width(120).Hidden();
                    columns.Bound(x => x.FaxNumber).ClientTemplate("#= prettyPhone(FaxNumber) #").Width(110).EditorTemplateName("PhoneEditor").Hidden();
                    columns.Bound(x => x.UnitNumber).Width(110).Hidden();
                    columns.Bound(x => x.IsActive)
                        .ClientTemplate("#if (IsActive == true) {# <span class='k-icon k-i-tick'/> #}else{# <span class='k-icon k-i-close'/> #}#")
                        .HeaderHtmlAttributes(new { style = "text-align:center" }).HtmlAttributes(new { style = "text-align:center" })
                        .Width(80).Hidden();

                    columns.Bound(x => x.UpdatedOnUtc).ClientTemplate("#=kendo.toString(UpdatedOn,'yyyy-MM-dd HH:mm')#").Width(120).Hidden();

                    if (permissionService.Authorize("ManageCompanyLocations"))
                    {
                        columns.Command(command => { command.Destroy().Text(" "); }).Width(60);
                    }

                })
                .ToolBar(toolBar => { if (permissionService.Authorize("ManageCompanyLocations")) { toolBar.Save(); toolBar.Create(); } })
                .Editable(editable => { if (permissionService.Authorize("ManageCompanyLocations")) { editable.Mode(GridEditMode.InCell); } })
                .EnableCustomBinding(false)
                .Filterable()
                .Sortable()
                .ColumnMenu()
                .Selectable()
                .Events(e=>e.Edit("onEdit"))
                .Pageable(x => x.Refresh(true).PageSizes(new int[]{10,20,30,50}))
                .DataSource(ds => ds
                    .Ajax()
                    .ServerOperation(false)
                    .PageSize(20)
                    .Batch(true)
                    .Read(read => read.Action("_CompanyLocationList", "Company").Data("getGuid"))
                            .Events(events => events.Error("error_handler1").Change("onChange"))
                    .Model(model =>
                    {
                        model.Id(p => p.Id);

                        model.Field(p => p.CityId).Editable(true);
                        model.Field(p => p.StateProvinceId).Editable(true);
                        model.Field(p => p.CountryId).Editable(true).DefaultValue(2);
                        model.Field(p => p.IsActive).Editable(true).DefaultValue(true);
                        model.Field(p => p.CreatedOn).Editable(false).DefaultValue(DateTime.Now);
                        model.Field(p => p.UpdatedOn).Editable(false).DefaultValue(DateTime.Now);
                        model.Field(p => p.UpdatedOnUtc).Editable(false).DefaultValue(DateTime.UtcNow);
                        model.Field(p => p.CreatedOnUtc).Editable(false).DefaultValue(DateTime.UtcNow);

                    })

                    .Create(update => update.Action("_CreateNewLocation", "Company"))
                    .Update(update => update.Action("_EditLocation", "Company"))
                    .Destroy(update => update.Action("_DeleteLocation", "Company"))
                )
            )
        </td>
    </tr>
</table>
